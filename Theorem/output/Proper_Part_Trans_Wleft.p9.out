============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 8681 was started by aidin12 on aidin12-HP-Pavilion-dv7-Notebook-PC,
Fri Sep 18 16:57:37 2020
The command was "/home/aidin12/macleod/Reasoning/prover9_bin/prover9 -t100 -f /home/aidin12/macleod/ontologies/after2/Theorems/conversions/Proper_Part_Trans_Wleft.all.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file /home/aidin12/macleod/ontologies/after2/Theorems/conversions/Proper_Part_Trans_Wleft.all.p9


formulas(assumptions).
-(all x all y all z (-(PP(x,y) & P(y,z)) | PP(x,z))).
(all x all y ((-PP(x,y) | P(x,y) & -P(y,x)) & (-(P(x,y) & -P(y,x)) | PP(x,y)))).
(all x (x = null | P(x,x))).
(all x all y (-(P(x,y) & P(y,x)) | x = y)).
(all x all y all z (-(P(x,y) & P(y,z)) | P(x,z))).
(all x ((x != null | (all y (-P(y,x) & -P(x,y)))) & (-(all y (-P(y,x) & -P(x,y))) | x = null))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 100).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 -(all x all y all z (-(PP(x,y) & P(y,z)) | PP(x,z))) # label(non_clause).  [assumption].
2 (all x all y ((-PP(x,y) | P(x,y) & -P(y,x)) & (-(P(x,y) & -P(y,x)) | PP(x,y)))) # label(non_clause).  [assumption].
3 (all x (x = null | P(x,x))) # label(non_clause).  [assumption].
4 (all x all y (-(P(x,y) & P(y,x)) | x = y)) # label(non_clause).  [assumption].
5 (all x all y all z (-(P(x,y) & P(y,z)) | P(x,z))) # label(non_clause).  [assumption].
6 (all x ((x != null | (all y (-P(y,x) & -P(x,y)))) & (-(all y (-P(y,x) & -P(x,y))) | x = null))) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
PP(c1,c2).  [clausify(1)].
P(c2,c3).  [clausify(1)].
-PP(c1,c3).  [clausify(1)].
-PP(x,y) | P(x,y).  [clausify(2)].
-PP(x,y) | -P(y,x).  [clausify(2)].
-P(x,y) | P(y,x) | PP(x,y).  [clausify(2)].
null = x | P(x,x).  [clausify(3)].
-P(x,y) | -P(y,x) | y = x.  [clausify(4)].
-P(x,y) | -P(y,z) | P(x,z).  [clausify(5)].
null != x | -P(y,x).  [clausify(6)].
null != x | -P(x,y).  [clausify(6)].
P(f1(x),x) | P(x,f1(x)) | null = x.  [clausify(6)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

No predicates eliminated.

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, P, PP ]).
Function symbol precedence:  function_order([ null, c1, c2, c3, f1 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      7 PP(c1,c2).  [clausify(1)].
kept:      8 P(c2,c3).  [clausify(1)].
kept:      9 -PP(c1,c3).  [clausify(1)].
kept:      10 -PP(x,y) | P(x,y).  [clausify(2)].
kept:      11 -PP(x,y) | -P(y,x).  [clausify(2)].
kept:      12 -P(x,y) | P(y,x) | PP(x,y).  [clausify(2)].
kept:      13 null = x | P(x,x).  [clausify(3)].
kept:      14 -P(x,y) | -P(y,x) | y = x.  [clausify(4)].
kept:      15 -P(x,y) | -P(y,z) | P(x,z).  [clausify(5)].
kept:      16 null != x | -P(y,x).  [clausify(6)].
kept:      17 null != x | -P(x,y).  [clausify(6)].
kept:      18 P(f1(x),x) | P(x,f1(x)) | null = x.  [clausify(6)].

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

% Clauses after input processing:

formulas(usable).
end_of_list.

formulas(sos).
7 PP(c1,c2).  [clausify(1)].
8 P(c2,c3).  [clausify(1)].
9 -PP(c1,c3).  [clausify(1)].
10 -PP(x,y) | P(x,y).  [clausify(2)].
11 -PP(x,y) | -P(y,x).  [clausify(2)].
12 -P(x,y) | P(y,x) | PP(x,y).  [clausify(2)].
13 null = x | P(x,x).  [clausify(3)].
14 -P(x,y) | -P(y,x) | y = x.  [clausify(4)].
15 -P(x,y) | -P(y,z) | P(x,z).  [clausify(5)].
16 null != x | -P(y,x).  [clausify(6)].
17 null != x | -P(x,y).  [clausify(6)].
18 P(f1(x),x) | P(x,f1(x)) | null = x.  [clausify(6)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.01 seconds.

given #1 (I,wt=3): 7 PP(c1,c2).  [clausify(1)].

given #2 (I,wt=3): 8 P(c2,c3).  [clausify(1)].

given #3 (I,wt=3): 9 -PP(c1,c3).  [clausify(1)].

given #4 (I,wt=6): 10 -PP(x,y) | P(x,y).  [clausify(2)].

given #5 (I,wt=6): 11 -PP(x,y) | -P(y,x).  [clausify(2)].

given #6 (I,wt=9): 12 -P(x,y) | P(y,x) | PP(x,y).  [clausify(2)].

given #7 (I,wt=6): 13 null = x | P(x,x).  [clausify(3)].

given #8 (I,wt=9): 14 -P(x,y) | -P(y,x) | y = x.  [clausify(4)].

given #9 (I,wt=9): 15 -P(x,y) | -P(y,z) | P(x,z).  [clausify(5)].

given #10 (I,wt=6): 16 null != x | -P(y,x).  [clausify(6)].

given #11 (I,wt=6): 17 null != x | -P(x,y).  [clausify(6)].

given #12 (I,wt=11): 18 P(f1(x),x) | P(x,f1(x)) | null = x.  [clausify(6)].

given #13 (A,wt=3): 19 P(c1,c2).  [resolve(10,a,7,a)].

given #14 (F,wt=3): 20 -P(c2,c1).  [resolve(11,a,7,a)].

given #15 (F,wt=3): 21 -PP(c3,c2).  [ur(11,b,8,a)].

given #16 (F,wt=3): 26 c3 != null.  [resolve(16,b,8,a),flip(a)].

given #17 (F,wt=3): 27 -P(x,null).  [ur(16,a,xx)].

given #18 (T,wt=6): 22 P(c3,c2) | PP(c2,c3).  [resolve(12,a,8,a)].

given #19 (T,wt=6): 23 -P(c3,c2) | c3 = c2.  [resolve(14,a,8,a)].

given #20 (T,wt=6): 24 -P(c3,x) | P(c2,x).  [resolve(15,a,8,a)].

given #21 (T,wt=6): 25 -P(x,c2) | P(x,c3).  [resolve(15,b,8,a)].

given #22 (A,wt=3): 28 c2 != null.  [resolve(17,b,8,a),flip(a)].

given #23 (F,wt=3): 29 -P(null,x).  [ur(17,a,xx)].

given #24 (F,wt=3): 34 c1 != null.  [resolve(19,a,17,b),flip(a)].

given #25 (F,wt=3): 37 -PP(c2,c1).  [ur(11,b,19,a)].

given #26 (F,wt=3): 38 -P(c3,c1).  [ur(15,a,8,a,c,20,a)].
-------- Proof 1 -------- 

============================== PROOF =================================

% Proof 1 at 0.01 (+ 0.01) seconds.
% Length of proof is 16.
% Level of proof is 4.
% Maximum clause weight is 9.000.
% Given clauses 26.

1 -(all x all y all z (-(PP(x,y) & P(y,z)) | PP(x,z))) # label(non_clause).  [assumption].
2 (all x all y ((-PP(x,y) | P(x,y) & -P(y,x)) & (-(P(x,y) & -P(y,x)) | PP(x,y)))) # label(non_clause).  [assumption].
5 (all x all y all z (-(P(x,y) & P(y,z)) | P(x,z))) # label(non_clause).  [assumption].
7 PP(c1,c2).  [clausify(1)].
8 P(c2,c3).  [clausify(1)].
9 -PP(c1,c3).  [clausify(1)].
10 -PP(x,y) | P(x,y).  [clausify(2)].
11 -PP(x,y) | -P(y,x).  [clausify(2)].
12 -P(x,y) | P(y,x) | PP(x,y).  [clausify(2)].
15 -P(x,y) | -P(y,z) | P(x,z).  [clausify(5)].
19 P(c1,c2).  [resolve(10,a,7,a)].
20 -P(c2,c1).  [resolve(11,a,7,a)].
25 -P(x,c2) | P(x,c3).  [resolve(15,b,8,a)].
38 -P(c3,c1).  [ur(15,a,8,a,c,20,a)].
40 P(c1,c3).  [resolve(25,a,19,a)].
43 $F.  [ur(12,b,38,a,c,9,a),unit_del(a,40)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=26. Generated=74. Kept=36. proofs=1.
Usable=26. Sos=10. Demods=0. Limbo=0, Disabled=12. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=37. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=9. Nonunit_bsub_feature_tests=27.
Megabytes=0.10.
User_CPU=0.01, System_CPU=0.01, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

THEOREM PROVED

Exiting with 1 proof.

------ process 8681 exit (max_proofs) ------

Process 8681 exit (max_proofs) Fri Sep 18 16:57:37 2020

========================== MACLEOD SUMMARY ===========================
reasoner: /home/aidin12/macleod/Reasoning/prover9_bin/prover9
status: PROOF
execution finished: Fri Sep 18 16:57:38 2020
total CPU time used: 0
The command was "/home/aidin12/macleod/Reasoning/prover9_bin/prover9 -t100 -f /home/aidin12/macleod/ontologies/after2/Theorems/conversions/Proper_Part_Trans_Wleft.all.p9"
============================ end of footer ===========================
