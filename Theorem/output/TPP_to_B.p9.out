============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 11538 was started by aidin12 on aidin12-HP-Pavilion-dv7-Notebook-PC,
Sat Sep 19 03:42:17 2020
The command was "/home/aidin12/macleod/Reasoning/prover9_bin/prover9 -t100 -f /home/aidin12/macleod/ontologies/after2/Theorems/conversions/TPP_to_B.all.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file /home/aidin12/macleod/ontologies/after2/Theorems/conversions/TPP_to_B.all.p9


formulas(assumptions).
-(all x all y (-B(x,y) | TPP(x,y))).
(all x all y ((-TPP(x,y) | PP(x,y) & (exists z (P(z,x) & B(z,y)))) & (-(PP(x,y) & (exists z (P(z,x) & B(z,y)))) | TPP(x,y)))).
(all x all y (-B(x,y) | PP(x,y))).
(all x all y all z (-(B(x,y) & B(y,z)) | B(x,z))).
(all x all y all z (-(P(x,y) & B(y,z)) | B(x,z))).
(all x all y all z (-(B(x,y) & P(y,z)) | P(x,z))).
(all x (x = null | P(x,x))).
(all x all y (-(P(x,y) & P(y,x)) | x = y)).
(all x all y all z (-(P(x,y) & P(y,z)) | P(x,z))).
(all x ((x != null | (all y (-P(y,x) & -P(x,y)))) & (-(all y (-P(y,x) & -P(x,y))) | x = null))).
(all x all y ((-PP(x,y) | P(x,y) & -P(y,x)) & (-(P(x,y) & -P(y,x)) | PP(x,y)))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 100).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 -(all x all y (-B(x,y) | TPP(x,y))) # label(non_clause).  [assumption].
2 (all x all y ((-TPP(x,y) | PP(x,y) & (exists z (P(z,x) & B(z,y)))) & (-(PP(x,y) & (exists z (P(z,x) & B(z,y)))) | TPP(x,y)))) # label(non_clause).  [assumption].
3 (all x all y (-B(x,y) | PP(x,y))) # label(non_clause).  [assumption].
4 (all x all y all z (-(B(x,y) & B(y,z)) | B(x,z))) # label(non_clause).  [assumption].
5 (all x all y all z (-(P(x,y) & B(y,z)) | B(x,z))) # label(non_clause).  [assumption].
6 (all x all y all z (-(B(x,y) & P(y,z)) | P(x,z))) # label(non_clause).  [assumption].
7 (all x (x = null | P(x,x))) # label(non_clause).  [assumption].
8 (all x all y (-(P(x,y) & P(y,x)) | x = y)) # label(non_clause).  [assumption].
9 (all x all y all z (-(P(x,y) & P(y,z)) | P(x,z))) # label(non_clause).  [assumption].
10 (all x ((x != null | (all y (-P(y,x) & -P(x,y)))) & (-(all y (-P(y,x) & -P(x,y))) | x = null))) # label(non_clause).  [assumption].
11 (all x all y ((-PP(x,y) | P(x,y) & -P(y,x)) & (-(P(x,y) & -P(y,x)) | PP(x,y)))) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
B(c1,c2).  [clausify(1)].
-TPP(c1,c2).  [clausify(1)].
-TPP(x,y) | PP(x,y).  [clausify(2)].
-TPP(x,y) | P(f1(x,y),x).  [clausify(2)].
-TPP(x,y) | B(f1(x,y),y).  [clausify(2)].
-PP(x,y) | -P(z,x) | -B(z,y) | TPP(x,y).  [clausify(2)].
-B(x,y) | PP(x,y).  [clausify(3)].
-B(x,y) | -B(y,z) | B(x,z).  [clausify(4)].
-P(x,y) | -B(y,z) | B(x,z).  [clausify(5)].
-B(x,y) | -P(y,z) | P(x,z).  [clausify(6)].
null = x | P(x,x).  [clausify(7)].
-P(x,y) | -P(y,x) | y = x.  [clausify(8)].
-P(x,y) | -P(y,z) | P(x,z).  [clausify(9)].
null != x | -P(y,x).  [clausify(10)].
null != x | -P(x,y).  [clausify(10)].
P(f2(x),x) | P(x,f2(x)) | null = x.  [clausify(10)].
-PP(x,y) | P(x,y).  [clausify(11)].
-PP(x,y) | -P(y,x).  [clausify(11)].
-P(x,y) | P(y,x) | PP(x,y).  [clausify(11)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating PP/2
12 -PP(x,y) | -P(z,x) | -B(z,y) | TPP(x,y).  [clausify(2)].
13 -TPP(x,y) | PP(x,y).  [clausify(2)].
14 -B(x,y) | PP(x,y).  [clausify(3)].
Derived: -B(x,y) | -P(z,x) | -B(z,y) | TPP(x,y).  [resolve(14,b,12,a)].
15 -PP(x,y) | P(x,y).  [clausify(11)].
Derived: P(x,y) | -TPP(x,y).  [resolve(15,a,13,b)].
Derived: P(x,y) | -B(x,y).  [resolve(15,a,14,b)].
16 -PP(x,y) | -P(y,x).  [clausify(11)].
Derived: -P(x,y) | -TPP(y,x).  [resolve(16,a,13,b)].
Derived: -P(x,y) | -B(y,x).  [resolve(16,a,14,b)].
17 -P(x,y) | P(y,x) | PP(x,y).  [clausify(11)].
Derived: -P(x,y) | P(y,x) | -P(z,x) | -B(z,y) | TPP(x,y).  [resolve(17,c,12,a)].

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, P, B, TPP ]).
Function symbol precedence:  function_order([ null, c1, c2, f1, f2 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      18 B(c1,c2).  [clausify(1)].
kept:      19 -TPP(c1,c2).  [clausify(1)].
kept:      20 -TPP(x,y) | P(f1(x,y),x).  [clausify(2)].
kept:      21 -TPP(x,y) | B(f1(x,y),y).  [clausify(2)].
kept:      22 -B(x,y) | -B(y,z) | B(x,z).  [clausify(4)].
kept:      23 -P(x,y) | -B(y,z) | B(x,z).  [clausify(5)].
kept:      24 -B(x,y) | -P(y,z) | P(x,z).  [clausify(6)].
kept:      25 null = x | P(x,x).  [clausify(7)].
kept:      26 -P(x,y) | -P(y,x) | y = x.  [clausify(8)].
kept:      27 -P(x,y) | -P(y,z) | P(x,z).  [clausify(9)].
kept:      28 null != x | -P(y,x).  [clausify(10)].
kept:      29 null != x | -P(x,y).  [clausify(10)].
kept:      30 P(f2(x),x) | P(x,f2(x)) | null = x.  [clausify(10)].
kept:      31 -B(x,y) | -P(z,x) | -B(z,y) | TPP(x,y).  [resolve(14,b,12,a)].
kept:      32 P(x,y) | -TPP(x,y).  [resolve(15,a,13,b)].
kept:      33 P(x,y) | -B(x,y).  [resolve(15,a,14,b)].
kept:      34 -P(x,y) | -TPP(y,x).  [resolve(16,a,13,b)].
kept:      35 -P(x,y) | -B(y,x).  [resolve(16,a,14,b)].
kept:      36 -P(x,y) | P(y,x) | -P(z,x) | -B(z,y) | TPP(x,y).  [resolve(17,c,12,a)].
kept:      37 -B(x,y) | -P(x,x) | TPP(x,y).  [factor(31,a,c)].

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

% Clauses after input processing:

formulas(usable).
end_of_list.

formulas(sos).
18 B(c1,c2).  [clausify(1)].
19 -TPP(c1,c2).  [clausify(1)].
20 -TPP(x,y) | P(f1(x,y),x).  [clausify(2)].
21 -TPP(x,y) | B(f1(x,y),y).  [clausify(2)].
22 -B(x,y) | -B(y,z) | B(x,z).  [clausify(4)].
23 -P(x,y) | -B(y,z) | B(x,z).  [clausify(5)].
24 -B(x,y) | -P(y,z) | P(x,z).  [clausify(6)].
25 null = x | P(x,x).  [clausify(7)].
26 -P(x,y) | -P(y,x) | y = x.  [clausify(8)].
27 -P(x,y) | -P(y,z) | P(x,z).  [clausify(9)].
28 null != x | -P(y,x).  [clausify(10)].
29 null != x | -P(x,y).  [clausify(10)].
30 P(f2(x),x) | P(x,f2(x)) | null = x.  [clausify(10)].
31 -B(x,y) | -P(z,x) | -B(z,y) | TPP(x,y).  [resolve(14,b,12,a)].
32 P(x,y) | -TPP(x,y).  [resolve(15,a,13,b)].
33 P(x,y) | -B(x,y).  [resolve(15,a,14,b)].
34 -P(x,y) | -TPP(y,x).  [resolve(16,a,13,b)].
35 -P(x,y) | -B(y,x).  [resolve(16,a,14,b)].
36 -P(x,y) | P(y,x) | -P(z,x) | -B(z,y) | TPP(x,y).  [resolve(17,c,12,a)].
37 -B(x,y) | -P(x,x) | TPP(x,y).  [factor(31,a,c)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.01 seconds.

given #1 (I,wt=3): 18 B(c1,c2).  [clausify(1)].

given #2 (I,wt=3): 19 -TPP(c1,c2).  [clausify(1)].

given #3 (I,wt=8): 20 -TPP(x,y) | P(f1(x,y),x).  [clausify(2)].

given #4 (I,wt=8): 21 -TPP(x,y) | B(f1(x,y),y).  [clausify(2)].

given #5 (I,wt=9): 22 -B(x,y) | -B(y,z) | B(x,z).  [clausify(4)].

given #6 (I,wt=9): 23 -P(x,y) | -B(y,z) | B(x,z).  [clausify(5)].

given #7 (I,wt=9): 24 -B(x,y) | -P(y,z) | P(x,z).  [clausify(6)].

given #8 (I,wt=6): 25 null = x | P(x,x).  [clausify(7)].

given #9 (I,wt=9): 26 -P(x,y) | -P(y,x) | y = x.  [clausify(8)].

given #10 (I,wt=9): 27 -P(x,y) | -P(y,z) | P(x,z).  [clausify(9)].

given #11 (I,wt=6): 28 null != x | -P(y,x).  [clausify(10)].

given #12 (I,wt=6): 29 null != x | -P(x,y).  [clausify(10)].

given #13 (I,wt=11): 30 P(f2(x),x) | P(x,f2(x)) | null = x.  [clausify(10)].

given #14 (I,wt=12): 31 -B(x,y) | -P(z,x) | -B(z,y) | TPP(x,y).  [resolve(14,b,12,a)].

given #15 (I,wt=6): 32 P(x,y) | -TPP(x,y).  [resolve(15,a,13,b)].

given #16 (I,wt=6): 33 P(x,y) | -B(x,y).  [resolve(15,a,14,b)].

given #17 (I,wt=6): 34 -P(x,y) | -TPP(y,x).  [resolve(16,a,13,b)].

given #18 (I,wt=6): 35 -P(x,y) | -B(y,x).  [resolve(16,a,14,b)].

given #19 (I,wt=15): 36 -P(x,y) | P(y,x) | -P(z,x) | -B(z,y) | TPP(x,y).  [resolve(17,c,12,a)].

given #20 (I,wt=9): 37 -B(x,y) | -P(x,x) | TPP(x,y).  [factor(31,a,c)].

given #21 (A,wt=6): 38 -B(c2,x) | B(c1,x).  [resolve(22,a,18,a)].

given #22 (F,wt=3): 42 -P(x,null).  [ur(28,a,xx)].

given #23 (F,wt=3): 43 -P(null,x).  [ur(29,a,xx)].

given #24 (F,wt=3): 49 -P(c1,c1).  [ur(31,a,18,a,c,18,a,d,19,a)].
-------- Proof 1 -------- 

============================== PROOF =================================

% Proof 1 at 0.01 (+ 0.01) seconds.
% Length of proof is 20.
% Level of proof is 5.
% Maximum clause weight is 12.000.
% Given clauses 24.

1 -(all x all y (-B(x,y) | TPP(x,y))) # label(non_clause).  [assumption].
2 (all x all y ((-TPP(x,y) | PP(x,y) & (exists z (P(z,x) & B(z,y)))) & (-(PP(x,y) & (exists z (P(z,x) & B(z,y)))) | TPP(x,y)))) # label(non_clause).  [assumption].
3 (all x all y (-B(x,y) | PP(x,y))) # label(non_clause).  [assumption].
7 (all x (x = null | P(x,x))) # label(non_clause).  [assumption].
10 (all x ((x != null | (all y (-P(y,x) & -P(x,y)))) & (-(all y (-P(y,x) & -P(x,y))) | x = null))) # label(non_clause).  [assumption].
11 (all x all y ((-PP(x,y) | P(x,y) & -P(y,x)) & (-(P(x,y) & -P(y,x)) | PP(x,y)))) # label(non_clause).  [assumption].
12 -PP(x,y) | -P(z,x) | -B(z,y) | TPP(x,y).  [clausify(2)].
14 -B(x,y) | PP(x,y).  [clausify(3)].
15 -PP(x,y) | P(x,y).  [clausify(11)].
18 B(c1,c2).  [clausify(1)].
19 -TPP(c1,c2).  [clausify(1)].
25 null = x | P(x,x).  [clausify(7)].
29 null != x | -P(x,y).  [clausify(10)].
31 -B(x,y) | -P(z,x) | -B(z,y) | TPP(x,y).  [resolve(14,b,12,a)].
33 P(x,y) | -B(x,y).  [resolve(15,a,14,b)].
43 -P(null,x).  [ur(29,a,xx)].
49 -P(c1,c1).  [ur(31,a,18,a,c,18,a,d,19,a)].
50 P(c1,c2).  [resolve(33,b,18,a)].
57 c1 = null.  [resolve(49,a,25,b),flip(a)].
58 $F.  [back_rewrite(50),rewrite([57(1)]),unit_del(a,43)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=24. Generated=67. Kept=40. proofs=1.
Usable=24. Sos=12. Demods=1. Limbo=1, Disabled=28. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=26. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=1 (0 lex), Back_demodulated=3. Back_unit_deleted=0.
Demod_attempts=31. Demod_rewrites=8.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=16. Nonunit_bsub_feature_tests=50.
Megabytes=0.12.
User_CPU=0.01, System_CPU=0.01, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

THEOREM PROVED

Exiting with 1 proof.

------ process 11538 exit (max_proofs) ------

Process 11538 exit (max_proofs) Sat Sep 19 03:42:17 2020

========================== MACLEOD SUMMARY ===========================
reasoner: /home/aidin12/macleod/Reasoning/prover9_bin/prover9
status: PROOF
execution finished: Sat Sep 19 03:42:20 2020
total CPU time used: 0
The command was "/home/aidin12/macleod/Reasoning/prover9_bin/prover9 -t100 -f /home/aidin12/macleod/ontologies/after2/Theorems/conversions/TPP_to_B.all.p9"
============================ end of footer ===========================
